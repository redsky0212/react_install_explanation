 - 참고 : 파스칼표기법(단어연결시 각 단어의 첫문자 대문자), 카멜표기법(단어연결시 각 단어의 첫문자 대문자 그러나 맨 처음문자는 소문자)

====================================================================
# react js 프로젝트 처음 시작 방법 (https://github.com/redsky0212/react_install_explanation.git)
====================================================================

** react참조 (https://ko.reactjs.org/docs/getting-started.html)

** nodejs, npm 설치(nodejs설치하면 npm자동설치)

----------------------------------------------------------------------------------------------------------------
** react 설치 (create React App)(https://github.com/facebook/create-react-app)
  * npm install -g create-react-app@버전번호 (global로 설치해놓고 이 후 프로젝트를 생성해서 실행 할 수 있다.)
  * react프로젝트 생성 ( create-react-app 프로젝트명 )
    - 원하는 폴더로 이동한 다음. ( create-react-app . )  실행하면 막 설치한다. (.)은 현재 디렉토리 위치라는 뜻.

** react app 실행
  * create-react-app 을 이용하여 설치 되었으면 cmd 창에서 해당폴더로 이동후 ( npm run start ) 하면 app이 실행됨.
------------------------------------------------------------------------------------------------------------------

** App.js 변경
  * App.js파일 내부의 code를 함수방식에서 class방식으로 변경.
    ------------------------------------------------------------------------------
                                                      import React, {Component} from 'react';
    function App() {                                  class App extends Component {
      return (                                          render() {
        <div className="App">       ------>                 return (
        </div>                                                 <div className="App">
      );                                                       </div>
    }                                                       };
                                                        }
                                                      }
    ------------------------------------------------------------------------------

** react 빌드
  * 해당 폴더에서 ( npm run build )
    - build폴더가 생성되며 내용 파일이 생성 됩니다.

** react 컴포넌트 만들기 기본
  * Component를 만드는 가장 기본이 되는 class code
    - 내부 html 코드는 JSX코드이다.
    ----------------------------------------------
    import React, {Component} from 'react';
    class 컴포넌트이름 extends Component {
      render() {
        return (
          <div></div>
        );
      }
    }
    -----------------------------------------------
  * 만들어진 Component를 사용할때는 <컴포넌트이름></컴포넌트이름> 와 같이 사용.


** props (https://reactjs.org/docs/components-and-props.html)
  * 컴포넌트를 사용하는 JSX코드에서 속성으로 값을 입력한다. <Subject title="WEB" sub="world wide web!"></Subject>
  * 실제 컴포넌트 내부의 JSX코드에 속성으로 넘어온 값을 셋팅한다. <h1>{this.props.title}</h1>{this.props.sub}
  * props 의 기능
    - 컴포넌트를 선언해 주고 props에 대한 기능. 
        class명.defaultProps = {}; // 컴포넌트에 props를 넘겨주지 않았어요 기본값을 셋팅할때 사용.
        class명.propTypes = {}; // 컴포넌트의 props에 value type을 설정할 수 있다.
        JSX코드 내에서 this.props.children  // 컴포넌트의 inner 값을 가져온다.

** React Developer Tools (https://reactjs.org/community/debugging-tools.html)
  * react개발 debugging툴 chrome 에 설치

** Component 파일로 분리
    - src폴더에 components폴더를 만든 다음.
    - 원하는 js파일을 만든다. ex) TOC.js
    - 만들어진 TOC.js파일 내부에 Component 기본 class 코딩을 한다.
    - 만들어진 TOC.js 컴포넌트를 사용할 다른 컴포넌트에서 import 해서 똑같이 사용한다.

** State 소개 (props와 함께 살펴보기)
  * 컴퍼넌트를 만들고 나서 props를 이용하여 하위 컴포넌트를 제어했었다.
    - 컴퍼넌트에서 사용되어지는 유동적인 데이터를 state라 한다.
    - state는 constructor에 반드시 this.state = {}; 초기화 해줘야 한다.
    - this.setState({...}); 이와같이 state값을 변경해야한다. 
    - this.state = 이와같이 값을 직접변경은 하지 말아야한다.

** State 사용
  * props, state값이 바뀌면 모든 컴포넌트의 연관되어있는 render함수는 다시 호출되어진다.
  * 상위 컴포넌트 내부에 만들어진 state값을 하위 컴포넌트의 props로 넘겨줄 수 있다.

** 배열의  .map 메서드를 이용하여 컴포넌트 반복 맵핑하기(array의 map메서드를 사용하면 좋음.)
  * 배열의 .map(콜백함수, [콜백내부에서 사용하는 this를 지정할 수 있다]) 메서드 사용.
    - 콜백함수의 인자는 (순환된 요소, index, 사용한배열) 이다.
   ---------------------------------------------
    var arr = [1,2,3,4]
    var a = arr.map((content, index, a) => {
      console.log(content+", "+index+", "+a);
    })
    로그: 1, 0, 1,2,3,4
    로그: 2, 1, 1,2,3,4
    로그: 3, 2, 1,2,3,4
    로그: 4, 3, 1,2,3,4
   ---------------------------------------------
    - JSX코드 내에는 특정 함수를 호출하게 코딩할 수도 있다. 
      ----------------------------------------------------
      testFn(data){
          return data.map((cont, i) => {
            return (<Contact data={cont} index={i} />);
          });
      }
      
      render(){
        return (
          <div>
            {/* 주석 테스트 */}
            {this.testFn(this.state.test)}
          </div>
        );
      }
      ----------------------------------------------------


** 일반적인 이벤트 (state, props, event)함께 연동
  * 해당 Tag에 onClick과 같이 이벤트를 연결.
  * 연결함수는 화살표함수로 연결. 또는 연결 함수뒤에 .bind()를 붙여준다. function(){}.bind(this)
  * state값을 동적으로 변경하고자 할때는 this.setState함수를 사용.(this.state.name = 'aaa';식으로 값을 바꾸면 값만 바뀌고 react의 내부에서 많은 처리들을 하지 못함)

** 컴포넌트에서 이벤트 만들기
  * 부모 컴포넌트에서 특정이름의 props로 이벤트함수로 사용되어질 함수를 넘겨준다.
  * 하위 컴포넌트에서는 이벤트용props를 onClick에서 넘겨받은 props함수를 호출한다.
  * 클릭한 tag의 특정값을 이벤트 함수로 넘겨주고자 할때는 그 값을 속성에 넣어서 넘겨주는 방식이 있고 함수의 .bind()에 인자로 넘겨주고 그것을 이용 할 수도 있다.
      function(id, event){}.bind(this, id);
      -- Function.bind() 함수에 대한 스터디 필요.

** CRUD 만들어보기 ---------------------------
  - create버튼클릭 -> form에 값 입력 -> submit 버튼 클릭 -> state contents list에 목록 추가 -> TOC컴포넌트에 list반영

** 막간 참조사항
  - 원본 state의 값을 최대한 변형하지 않고 복제하여 사용하는 방법으로 코딩하는 습관을 들이자.
    this.state.contents.push(값); // 이 방법은 잘못된 방법, this.setState({contents:값}) 으로 적용해야 함.
    var arr = this.state.contents.concat(값); this.setState({contents:arr}); // 이 방법으로 추가된 값이 들어간 state를 복제하여 사용하는 방법으로 코딩 추천.
    var arr = Array.from(this.state.contents); arr.push(값); this.setState({contents:arr}); // (es6방법) 이와같이 Array.from 을 사용하여 값 복제를 해서 사용하는 방법도 있음.
  - 값이 array가 아닌 object일 경우.
    var a = {name: 'test'};
    var val = Object.assign({}, a);
    val.name = '값 변경';

** create 구현 : mode 변경
  * 예제 소스에 'create','update','delete' 버튼을 추가하기 위해 Control 컴포넌트를 생성한다.

** Update 구현
  * props로 넘겨준 값을 form에 값 셋팅하는 방법
    - update component에서 넘어온 props를 바로 JSX의 value로 셋팅하면 오류가 생김.
      this.state에 값을 넣어준 다음 그 state값을 셋팅해 줘야함.
    - 또한 실시간 변경된 값을 state에 바로바로 넣어줘야 하므로 onChange를 걸어주고 this.setState로 변경된 값을 가져와 셋팅 해줘야 함.

** Delete 구현
  * 


======================================================================================
======================================================================================
** 환경설정의 또 다른 방법(구형)
  *  npm init (webpack, webpack-dev-server는 global로 설치하고 save로도 설치한다.)
  * git, nodejs, npm, webpack, webpack-dev-server 설치한다.
  * react, react-dom 을 설치한다. (npm i --save react react-dom)
  * 개발의존모듈 설치 (babel, react-hot-loader)
    (npm i --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react)
    (npm i --save-dev react-hot-loader webpack webpack-dev-server)

  * webpack.config.js 파일 생성하여 내용 추가한다.
    --------------------------------------------------
    var webpack = require('webpack');

    module.exports = {
        entry: './src/index.js',
        output: {
            path: __dirname + '/public/',
            filename: 'bundle.js'
        },
        devServer: {
            hot:true,
            inline: true,
            host: '0.0.0.0',
            port: 4000,
            contentBase: __dirname + '/public/',
        },
        module: {
            loaders: [
                {
                    test: /\.js$/,
                    loader: 'babel',
                    exclude: /node_modules/,
                    query: {
                        cacheDirectory: true,
                        presets: ['es2015','react']
                    }
                }
            ]
        },
        plugins: [
            new webpack.HotModuleReplacementPlugin()
        ]
    };
    ------------------------------------------------------------

  * public/index.html 파일을 생성한다.
    ------------------------------------------------------------
    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="UTF-8">
            <title>React Test1</title>
        </head>
        <body>
            <div id="root"></div>
            <script src="bundle.js"></script>
        </body>
    </html>
    ------------------------------------------------------------

  * src/components/App.js 파일을 생성한다.
    - 파일을 만들어 저장했을때 코드 내용 오류가 뜨면(jshint때문) es6를 사용한다는 파일을 생성해야한다.
    - 루트에 .jshintrc 파일 생성 후 내용은 { "esversion": 6 } 입력
    ------------------------------------------------------------
    import React, {Component} from 'react';

    class App extends Component {
        
        constructor(props){
            super(props);
        }
        
        render(){
            return (
                <h1>Hello Test1</h1>
            )
        }
    }

    export default App;
    ------------------------------------------------------------

  * src/index.js 파일을 생성한다.
    ------------------------------------------------------------
    import React from 'react';
    import ReactDom from 'react-dom';
    import App from './components/App';

    const rootElement = document.getElementById('root');
    ReactDom.render(<App/>, rootElement);
    ------------------------------------------------------------

  * 위 까지 진행 후 script 실행 내용을 작성 한다.
    package.json파일의 내용중 scripts부분에 내용을 작성한다.
    "dev-server" : "webpack-dev-server"

  * npm run dev-server 실행시 오류가 혹시 뜨면 오류내용을 잘 봐야하겠지만.
    내용에 (npm i -D(--save-dev와 같음) webpack-cli) cli를 설치한다.


======================================================================================
======================================================================================
** 환경설정의 또 다른 방법(최신) 2019-08-02
  * npm init -y
  * 모듈설치
    - npm install --save react react-dom
    - npm install --save-dev webpack webpack-cli html-webpack-plugin webpack-dev-server babel-loader @babel/core @babel/preset-env @babel/preset-react rimraf
    - 설치모듈 설명
      --------------------------------------------------------------
      react, react-dom: React(리액트) 개발에 필요한 필수 항목입니다.
      webpack: Webpack(웹팩) 라이브러리입니다.
      webpack-cli: Webpack(웹팩)을 명령어로 조작하기 위한 라이브러리입니다.
      html-webpack-plugin: Webpack(웹팩)에서 HTML을 다루기 위한 플러그인입니다.
      webpack-dev-server: Webpack(웹팩)으로 로컬에서 개발하기 위한 테스트 서버입니다.
      babel-loader: Webpack(웹팩)에서 babel(바벨)을 다루기 위한 라이브러리입니다.
      @babel/core: babel(바벨)로 컴파일할 예정입니다.
      @babel/preset-env: babel(바벨)로 컴파일시 어떤 타겟으로 지정할지 설정하는 라이브러리입니다.
      @babel/preset-react: React(리액트)를 babel(바벨)로 컴파일하기 위한 라이브러리입니다.
      rimraf: Mac과 윈도우즈에서 동일한 명령어로 폴더를 삭제하기 위한 라이브러리입니다.
      --------------------------------------------------------------
  
  * package.json 설정 scripts부분 수정
    --------------------------------------------------------------
    {
      "name": "react_start",
      "version": "1.0.0",
      "description": "",
      "scripts": {
        "start": "webpack-dev-server --mode development",
        "prebuild": "rimraf dist",
        "build": "webpack --progress --mode production"
      },
      "author": "dev.yakuza@gmail.com",
      "dependencies": {
        "react": "16.8.6",
        "react-dom": "16.8.6"
      },
      "devDependencies": {
        "@babel/core": "7.4.5",
        "@babel/preset-env": "7.4.5",
        "@babel/preset-react": "7.0.0",
        "babel-loader": "8.0.6",
        "cross-env": "5.2.0",
        "html-webpack-plugin": "3.2.0",
        "rimraf": "2.6.3",
        "webpack": "4.33.0",
        "webpack-cli": "3.3.4",
        "webpack-dev-server": "3.7.1"
      }
    }
    --------------------------------------------------------------
    - package.json 내용 설명
    --------------------------------------------------------------
     -- webpack-dev-server --mode development,: npm start 또는 npm run start로 실행되는 스크립트입니다. 
        Webpack(웹팩)의 개발 서버를 development 모드로 실행시킵니다. Webpack(웹팩)을 실행시킬 때는 
        항상 모드(development 또는 production)를 설정해야합니다.
     -- "prebuild": "rimraf dist",: npm run build로 build 스크립트를 실행하면 build 스크립트전에 
        이 스크립트가 실행됩니다. pre와 post로 스크립트 실행전, 실행후 실행시키고 싶은 스크립트를 실행시킬 수 있습니다. 
        저는 빌드후 생성되는 폴더를 지우고 다시 만들기 위해 사용하고 있습니다.
     -- "build": "webpack --progress --mode production": npm run build로 실행되는 스크립트입니다. 
        Webpack(웹팩)을 production 모드로 실행시켜 번들링(bundling)합니다. 
        –progress은 빌드 진행 과정을 모니터링하기 위한 옵션입니다.
    --------------------------------------------------------------

  * webpack.config.js 파일 루트에 생성
    --------------------------------------------------------------
    const path = require('path');

    const HtmlWebpackPlugin = require('html-webpack-plugin');

    module.exports = {
      entry: {
        'js/app': ['./src/App.jsx'],
      },
      output: {
        path: path.resolve(__dirname, 'dist/'),
        publicPath: '/',
      },
      module: {
        rules: [
          {
            test: /\.(js|jsx)$/,
            use: ['babel-loader'],
            exclude: /node_modules/,
          },
        ],
      },
      plugins: [
        new HtmlWebpackPlugin({
          template: './src/index.html',
          filename: 'index.html',
        }),
      ],
    };
    --------------------------------------------------------------
    - 설명
    --------------------------------------------------------------
    const path = require('path');
    절대 경로를 참조하기위해 path를 불러옵니다.

    const HtmlWebpackPlugin = require('html-webpack-plugin');
    Webpack(웹팩)에서 HTML을 다루기위한 플러그인을 불러옵니다.

    entry: {
        'js/app': ['./src/App.jsx'],
    },
    번들 파일(bundle)로 만들기 위한 시작 파일(entry)을 설정하였습니다. 
    생성될 번들 파일(bundle)은 js 폴더 하위에 app.js라는 이름으로 생성될 것이며 이 파일은 ./src/App.jsx를 시작으로 번들링(하나로 합치기)합니다.

    output: {
        path: path.resolve(__dirname, 'dist/'),
        publicPath: '/',
    },
    생성된 번들 파일(bundle)은 ./dist/ 폴더에 생성됩니다. 
    publicPath를 지정함으로써 HTML등 다른 파일에서 생성된 번들을 참조할 때, /을 기준으로 참조합니다. 
    (ex> <script type="text/javascript" src="/js/app.js"></script>)

    module: {
      rules: [
        {
          test: /\.(js|jsx)$/,
          use: ['babel-loader'],
          exclude: /node_modules/,
        },
      ],
    },
    React(리액트) 파일인 jsx와 js는 babel(바벨)을 이용하여 빌드합니다.

    plugins: [
      new HtmlWebpackPlugin({
        template: './src/index.html',
        filename: 'index.html',
      }),
    ],
    마지막으로 ./src/index.html 파일을 dist 경로에 index.html로 파일을 생성합니다. 
    파일을 생성할 때, Webpack(웹팩)이 만든 번들 파일(/js/app.js)를 HTML에 추가하여 생성합니다.
    ---------------------------------------------------------------

  * babel 설정
    - babel을 설정하기 위해 .babelrc 파일을 생성하고 아래내용 추가.
    ---------------------------------------------------------------
    {
      "presets": [
        [
          "@babel/preset-env",
          { "targets": { "browsers": ["last 2 versions", ">= 5% in KR"] } }
        ],
        "@babel/react"
      ]
    }
    ---------------------------------------------------------------
    - 설명
    ---------------------------------------------------------------
    babel(바벨)로 컴파일 할 때, target을 지정하였습니다. 
    브라우저의 상위 버전 두개(예: IE 11, 10)와 한국(KR)에서 5% 이상의 점유율을 가지고 있는 브라우저에 
    대응하여 컴파일되도록 설정하였습니다. 
    또한 "@babel/react"을 통해 React(리액트)도 컴파일될 수 있도록 설정하였습니다.
    ---------------------------------------------------------------

  * html 만들기
    - React를 사용할 HTML파일을 ./src/index.html에 생성하고 아래내용 추가.
    ---------------------------------------------------------------
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <title>Hello World</title>
      </head>
      <body>
        <div id="app"></div>
      </body>
    </html>
    ---------------------------------------------------------------

  * React 만들기
    - 드디어 React파일 생성. ./src/App.jsx 생성하고 아래 내용 추가.
    ---------------------------------------------------------------
    import React from 'react';
    import ReactDOM from 'react-dom';

    const App = () => {
      return <h1>Hello World!</h1>;
    };
    ReactDOM.render(<App />, document.getElementById('app'));
    ---------------------------------------------------------------

  * 실행
    - npm run start
    - localhost:8080 브라우저 확인
    - package.json에 "start" 에 "-open" 옵션을 추가하면 서버 실행하면서 브라우져가 열림.


======================================================================================
======================================================================================
** 환경설정의 또 다른 방법(create-react-app 사용) 
   - 참조 동영상 (https://www.youtube.com/watch?v=_yEH9mczm3g)

   * 로컬 PC에 (npm i -g create-react-app) 팩키지 설치
    -- npm i -g create-react-app 으로 global로 설치 해놓고 설치가 완료 되면 
       원하는 폴더에서 (create-react-app 프로젝트명) 과 같이 실행하면 react프로젝트를 생성한다.(react, react-dom등 다양한 모듈이 포함된 프로젝트가 생성됨)

   * VSCode로 코드 작성하기(https://code.visualstudio.com)
    -- 


