 - 참고 : 파스칼표기법(단어연결시 각 단어의 첫문자 대문자), 카멜표기법(단어연결시 각 단어의 첫문자 대문자 그러나 맨 처음문자는 소문자)

====================================================================
# react js 프로젝트 처음 시작 방법 (https://github.com/redsky0212/react_install_explanation.git)
====================================================================

** react참조 (https://ko.reactjs.org/docs/getting-started.html)

** nodejs, npm 설치(nodejs설치하면 npm자동설치)

** react 설치 (create React App)(https://github.com/facebook/create-react-app)
  * npm install -g create-react-app@버전번호 (global로 설치해놓고 이 후 프로젝트를 생성해서 실행 할 수 있다.)
  * react프로젝트 생성 ( create-react-app 프로젝트명 )
    - 원하는 폴더로 이동한 다음. ( create-react-app . )  실행하면 막 설치한다. (.)은 현재 디렉토리 위치라는 뜻.

** react app 실행
  * create-react-app 을 이용하여 설치 되었으면 cmd 창에서 해당폴더로 이동후 ( npm run start ) 하면 app이 실행됨.

** App.js 변경
  * App.js파일 내부의 code를 함수방식에서 class방식으로 변경.
    ------------------------------------------------------------------------------
                                                      import React, {Component} from 'react';
    function App() {                                  class App extends Component {
      return (                                          render() {
        <div className="App">       ------>                 return (
        </div>                                                 <div className="App">
      );                                                       </div>
    }                                                       };
                                                        }
                                                      }
    ------------------------------------------------------------------------------

** react 빌드
  * 해당 폴더에서 ( npm run build )
    - build폴더가 생성되며 내용 파일이 생성 됩니다.

** react 컴포넌트 만들기 기본
  * Component를 만드는 가장 기본이 되는 JSX템플릿 code
    - 내부 html 코드는 JSX코드이다.
    ----------------------------------------------
    class 컴포넌트이름 extends Component {
      render() {
        return (
          <div></div>
        );
      }
    }
    -----------------------------------------------
  * 만들어진 Component를 사용할때는 <컴포넌트이름></컴포넌트이름> 와 같이 사용.


** props (https://reactjs.org/docs/components-and-props.html)
  * 컴포넌트를 사용하는 JSX코드에서 속성으로 값을 입력한다. <Subject title="WEB" sub="world wide web!"></Subject>
  * 실제 컴포넌트 내부의 JSX코드에 속성으로 넘어온 값을 셋팅한다. <h1>{this.props.title}</h1>{this.props.sub}

** React Developer Tools (https://reactjs.org/community/debugging-tools.html)
  * react개발 debugging툴 chrome 에 설치

** Component 파일로 분리
    - src폴더에 components폴더를 만든 다음.
    - 원하는 js파일을 만든다. ex) TOC.js
    - 만들어진 TOC.js파일 내부에 Component 기본 class 코딩을 한다.
    - 만들어진 TOC.js 컴포넌트를 사용할 다른 컴포넌트에서 import 해서 똑같이 사용한다.

** State 소개 (props와 함께 살펴보기)
  * 컴퍼넌트를 만들고 나서 props를 이용하여 하위 컴포넌트를 제어했었다.
    - 그 props를 받아서 컴포넌트 내부에서 그 값을 이용하여 사용되어지는 것을 state라 한다.

** State 사용
  * props, state값이 바뀌면 모든 컴포넌트의 연관되어있는 render함수는 다시 호출되어진다.
  * 상위 컴포넌트 내부에 만들어진 state값을 하위 컴포넌트의 props로 넘겨줄 수 있다.

** 일반적인 이벤트 (state, props, event)함께 연동
  * 해당 Tag에 onClick과 같이 이벤트를 연결.
  * 연결함수는 화살표함수로 연결. 또는 연결 함수뒤에 .bind()를 붙여준다. function(){}.bind(this)
  * state값을 동적으로 변경하고자 할때는 this.setState함수를 사용.(this.state.name = 'aaa';식으로 값을 바꾸면 값만 바뀌고 react의 내부에서 많은 처리들을 하지 못함)

** 컴포넌트에서 이벤트 만들기
  * 부모 컴포넌트에서 특정이름의 props로 이벤트함수로 사용되어질 함수를 넘겨준다.
  * 하위 컴포넌트에서는 이벤트용props를 onClick에서 넘겨받은 props함수를 호출한다.
  * 클릭한 tag의 특정값을 이벤트 함수로 넘겨주고자 할때는 그 값을 속성에 넣어서 넘겨주는 방식이 있고 함수의 .bind()에 인자로 넘겨주고 그것을 이용 할 수도 있다.
      function(id, event){}.bind(this, id);
      -- Function.bind() 함수에 대한 스터디 필요.

** CRUD 만들어보기 ---------------------------
  - create버튼클릭 -> form에 값 입력 -> submit 버튼 클릭 -> state contents list에 목록 추가 -> TOC컴포넌트에 list반영

** 막간 참조사항
  - 원본 state의 값을 최대한 변형하지 않고 복제하여 사용하는 방법으로 코딩하는 습관을 들이자.
    this.state.contents.push(값); // 이 방법은 잘못된 방법, this.setState({contents:값}) 으로 적용해야 함.
    var arr = this.state.contents.concat(값); this.setState({contents:arr}); // 이 방법으로 추가된 값이 들어간 state를 복제하여 사용하는 방법으로 코딩 추천.
    var arr = Array.from(this.state.contents); arr.push(값); this.setState({contents:arr}); // (es6방법) 이와같이 Array.from 을 사용하여 값 복제를 해서 사용하는 방법도 있음.
  - 값이 array가 아닌 object일 경우.
    var a = {name: 'test'};
    var val = Object.assign({}, a);
    val.name = '값 변경';

** create 구현 : mode 변경
  * 예제 소스에 'create','update','delete' 버튼을 추가하기 위해 Control 컴포넌트를 생성한다.

** Update 구현
  * props로 넘겨준 값을 form에 값 셋팅하는 방법
    - update component에서 넘어온 props를 바로 JSX의 value로 셋팅하면 오류가 생김.
      this.state에 값을 넣어준 다음 그 state값을 셋팅해 줘야함.
    - 또한 실시간 변경된 값을 state에 바로바로 넣어줘야 하므로 onChange를 걸어주고 this.setState로 변경된 값을 가져와 셋팅 해줘야 함.

** Delete 구현
  * 